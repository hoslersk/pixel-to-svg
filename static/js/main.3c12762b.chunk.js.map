{"version":3,"sources":["components/svg.js","lib/pixels.js","app.js","report-web-vitals.js","index.js"],"names":["SVG","data","dimensions","className","viewBox","width","height","AlphaChannelBackground","map","colorData","color","fill","d","path","patternUnit","x","y","id","patternUnits","patternContentUnits","getPixelsForScanline","scanlineIndex","rawPixels","chunk","pixels","forEach","rawPixel","index","r","g","b","a","push","getPathForPixels","sortedPixels","orderBy","pixel","pixelPath","App","useState","hasFile","setHasFile","hasError","setHasError","setData","setDimensions","clearData","canvasRef","useRef","useEffect","current","canSubmit","onSubmit","e","canvasElement","callback","preventDefault","context","getContext","pixelsByColor","scanlineData","getImageData","scanlinePixels","scanlinePixelsByColor","groupBy","onChange","file","target","files","reader","FileReader","onload","event","img","Image","image","drawImage","src","result","readAsDataURL","type","classNames","ref","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c12762b.chunk.js","sourcesContent":["import React from 'react';\nimport { map } from 'lodash';\n\nexport default function SVG({ data, dimensions }) {\n  return (\n    <svg\n      className=\"svg\"\n      viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}\n    >\n\t\t\t<AlphaChannelBackground {...dimensions} />\n\t\t\t{map(data, (colorData, color) => (\n        <path key={color} fill={color} d={colorData.path} />\n      ))}\n    </svg>\n  );\n}\n\n\nfunction AlphaChannelBackground({ height, width }) {\n\tconst patternUnit = width / 100;\n\treturn(\n\t\t<svg\n\t\t\tx=\"0\"\n\t\t\ty=\"0\"\n\t\t\theight=\"100%\"\n\t\t\twidth=\"100%\"\n\t\t\tviewBox={`0 0 ${width} ${height}`}\n\t\t>\n\t\t\t<defs>\n\t\t\t\t<pattern\n\t\t\t\t\tid=\"alpha-bg\"\n\t\t\t\t\tx=\"0\"\n\t\t\t\t\ty=\"0\"\n\t\t\t\t\twidth={patternUnit * 2}\n\t\t\t\t\theight={patternUnit * 2}\n\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\tpatternContentUnits=\"userSpaceOnUse\"\n\t\t\t\t>\n\t\t\t\t\t<rect width={patternUnit} height={patternUnit} fill=\"#eee\" x=\"0\" y=\"0\" />\n\t\t\t\t\t<rect\n\t\t\t\t\t\twidth={patternUnit}\n\t\t\t\t\t\theight={patternUnit}\n\t\t\t\t\t\tfill=\"#eee\"\n\t\t\t\t\t\tx={patternUnit}\n\t\t\t\t\t\ty={patternUnit}\n\t\t\t\t\t/>\n\t\t\t\t</pattern>\n\t\t\t</defs>\n\t\t\t<rect fill=\"url(#alpha-bg)\" width=\"100%\" height=\"100%\" />\n\t\t</svg>\n\t);\n}\n","\nimport { chunk, forEach, groupBy, orderBy, reduce } from 'lodash';\n\nconst PIXEL_CONFIG_LENGTH = 4;\n\nexport function optimizePixelsByColor(pixels) {\n  const pixelsByColor = groupBy(pixels, pixel => {\n    const { r, g, b, a } = pixel;\n    return `rgba(${r}, ${g}, ${b}, ${a})`;\n  });\n\n  const pixelPathConfigs = [];\n\n  forEach(pixelsByColor, (pixels, color) => {\n    const orderedPixels = orderBy(pixels, ['x', 'y']);\n    const path = reduce(orderedPixels, (result, pixel, index) => {\n      const { x, y, width, height } = pixel;\n      const tl = `${x},${y}`;\n      const tr = `${x + width},${y}`;\n      const bl = `${x},${y + height}`;\n      const br = `${x + width},${y + height}`;\n      const pixelPath = `${br} ${bl} ${tl} ${tr} ${br}`;\n      return result + ' ' + pixelPath;\n    }, 'M');\n\n    pixelPathConfigs.push({\n      d: path + 'Z',\n      fill: color,\n      stroke: 'none',\n    });\n  });\n\n  return pixelPathConfigs;\n}\n\nexport function getPixels({ data = [], dimensions }) {\n  const scanlineLength = dimensions.width;\n\n  const rawPixels = chunk(data, PIXEL_CONFIG_LENGTH);\n\n  const pixels = [];\n  let currentScanline = 0;\n  let currentColumn = 0;\n\n  forEach(rawPixels, (rawPixel, index) => {\n    const [r, g, b, a] = rawPixel;\n    const isFinalScanlinePixel = (index + 1) % scanlineLength === 0;\n\n    if (a > 0) {\n      pixels.push({\n        r,\n        g,\n        b,\n        a: a / 255,\n        x: currentColumn,\n        y: currentScanline,\n        width: 1,\n        height: 1,\n      });\n    }\n\n    currentColumn = currentColumn + 1;\n\n    if (isFinalScanlinePixel) {\n      currentScanline = currentScanline + 1;\n      currentColumn = 0;\n    }\n  });\n\n  return pixels;\n}\n\n\nexport function getPixelsForScanline({ data = [], scanlineIndex }) {\n  const rawPixels = chunk(data, PIXEL_CONFIG_LENGTH);\n\n  const pixels = [];\n\n\tforEach(rawPixels, (rawPixel, index) => {\n    const [r, g, b, a] = rawPixel;\n\n    if (a > 0) {\n      pixels.push({\n        r,\n        g,\n        b,\n        a: a / 255,\n        x: index,\n        y: scanlineIndex,\n        width: 1,\n        height: 1,\n      });\n    }\n  });\n\n  return pixels;\n}\n\n\nfunction getPathForPixels(pixels = []) {\n\tconst sortedPixels = orderBy(pixels, ['x', 'y'], ['asc', 'asc']);\n\tlet path = '';\n\n\tforEach(sortedPixels, (pixel, index) => {\n\t\tconst { x, y, width, height } = pixel;\n\t\tconst pixelPath = `M${x},${y} l${width},0 l0,${height} l${-width},0Z`\n\t\tpath = path + pixelPath;\n\t});\n\n\treturn path;\n}\n\n\nexport function processImageDataByScanline(canvasElement, callback) {\n\tif (canvasElement) {\n\t\tconst { width, height } = canvasElement;\n\n\t\tconst context = canvasElement.getContext('2d');\n\n\t\tlet scanlineIndex = 0;\n\t\tconst pixelsByColor = {};\n\n\t\twhile(scanlineIndex < height) {\n\t\t\tconst scanlineData = context.getImageData(0, scanlineIndex, width, 1);\n\n\t\t\tconst scanlinePixels = getPixelsForScanline({\n\t\t\t\tdata: scanlineData?.data,\n\t\t\t\tscanlineIndex,\n\t\t\t});\n\n\t\t\tconst scanlinePixelsByColor = groupBy(scanlinePixels, pixel => {\n\t\t\t\tconst { r, g, b, a } = pixel;\n\t\t\t\treturn `rgba(${r}, ${g}, ${b}, ${a})`;\n\t\t\t});\n\n\t\t\tforEach(scanlinePixelsByColor, (pixels, color) => {\n\t\t\t\tif (pixelsByColor[color]) {\n\t\t\t\t\tpixelsByColor[color].pixels = [\n\t\t\t\t\t\tpixelsByColor[color].pixels,\n\t\t\t\t\t\t...pixels,\n\t\t\t\t\t];\n\n\t\t\t\t\tpixelsByColor[color].path = pixelsByColor[color].path + getPathForPixels(pixels);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpixelsByColor[color] = {\n\t\t\t\t\t\tpixels,\n\t\t\t\t\t\tpath: getPathForPixels(pixels),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcallback(pixelsByColor);\n\n\t\t\tscanlineIndex = scanlineIndex + 1;\n\t\t}\n\t}\n\n\treturn null;\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\n\nimport SVG from './components/svg';\nimport { processImageDataByScanline } from './lib/pixels';\n\nimport './index.css';\n\n\nexport default function App() {\n\tconst [hasFile, setHasFile] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [data, setData] = useState(null);\n  const [dimensions, setDimensions] = useState({ width: 1, height: 1 });\n\n\tconst clearData = () => setData(null);\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n\t\t\tconst { width, height } = dimensions;\n\t\t\tif (hasFile && width < 3 && height < 3) setHasError(true);\n\t\t\telse {\n\t\t\t\tsetHasError(false);\n\t\t\t}\n    //   const context = canvasRef.current.getContext('2d')\n    //   const imageData = context.getImageData(0, 0, dimensions.width, dimensions.height);\n    //   setData(imageData);\n    }\n  }, [canvasRef.current, dimensions, hasFile]);\n\n  const updateCanvas = image => {\n    setDimensions({\n      width: image.width,\n      height: image.height,\n    });\n\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.drawImage(image, 0, 0, image.width, image.height);\n  };\n\n\tconst canSubmit = !!canvasRef.current && hasFile && !hasError;\n\n  const onChange = e => {\n\t\tclearData();\n\t\tsetHasError(false);\n\n\t\tconst file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = function(event) {\n        const img = new Image();\n\n        img.onload = function() {\n          updateCanvas(img);\n        }\n\n        img.src = event.target.result;\n    }\n\n\t\tif (file) {\n\t\t\tsetHasFile(true);\n\t\t\treader.readAsDataURL(file);\n\t\t}\n\t\telse setHasFile(false);\n  };\n\n\tconst appendScanlineData = (scanlineData = []) => {\n\t\tsetData(currentData => [...currentData || [], ...scanlineData]);\n\t};\n\n\tconst onSubmit = e => {\n\t\te.preventDefault();\n\t\tclearData();\n\t\tprocessImageDataByScanline(canvasRef.current, setData);\n\t};\n\n  return (\n    <div className=\"container\">\n      <h1>Pixel to SVG</h1>\n      <p>A tool for converting simple sprite sheets and pixel art to SVG.</p>\n\n      <form\n        className=\"form\"\n        onSubmit={onSubmit}\n      >\n        <label className=\"label\">\n          Upload an image (PNG recommended)\n        </label>\n        <input\n          className=\"input\"\n          onChange={onChange}\n          type=\"file\"\n        />\n        <div\n          className={classNames(\n            'feedback',\n            { 'feedback--invalid': hasError },\n          )}\n        >\n          An error has occurred. Please ensure file is a valid PNG image and try again.\n        </div>\n\n\t\t\t\t<div className=\"label\">Image Preview:</div>\n\n\t\t\t\t<canvas className=\"canvas\" {...dimensions} ref={canvasRef} />\n\n\t\t\t\t<button disabled={!canSubmit} type=\"submit\">\n\t\t\t\t\tConvert to SVG\n\t\t\t\t</button>\n      </form>\n\n\n\t\t\t<h2>SVG Output</h2>\n      <SVG {...{ data, dimensions }} />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './report-web-vitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}